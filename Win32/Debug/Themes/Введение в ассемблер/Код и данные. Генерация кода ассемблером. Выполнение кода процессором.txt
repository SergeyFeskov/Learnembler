Процесс выполнения программы
При запуске программы выполняются следующие действия:
· Загрузка исполняемого файла в ОЗУ
· Определение формата исполняемого файла
· Определение адреса точки входа (entry point)
· Передача управления на точку входа (помещение адреса в IP или EIP)
$
Задача компилятора
Задача компилятора языка ассемблера – формирование исполняемого файла, в котором будут содержаться инструкции процессора.
$
Инструкция с точки зрения представления в памяти
Порядковый номер байта в ОЗУ – его физический адрес (далее ФА) (первый байт в адресе 0). 
В машинном коде инструкция – это несколько байтов, которые ассемблер позволяет записывать «словами».
$
Шины, связывающие процессор и ОЗУ
Логически процессор и ОЗУ соединены 3-мя шинами:
· Адреса 
  (указание ФА, для кот. нужно выполнить операцию)
· Данных 
  (для передачи данных: для чтения – передача прочитанных данных из памяти, а при записи – записанные данные передаёт    процессор)
  Разрядность шины данных определяет размер памяти, кот. может быть передана за 1 обращение к ОЗУ = разрядность процессора
· Управления 
  (выбор операции: чтение или запись)
$
Инструкции
Команды процессора – инструкции:
· Операция (действие)
· Исходные данные
· Результат (место записи)

Для каждого вида процессора свои правила записи инструкции в виде последовательности байт в машинном коде.
$
Этапы выполнения инструкции
Бесконечный цикл, который процессор выполняет при подаче питания:
1. Fetch – чтение очередной инструкции из ОЗУ
1. Decode – определение типа инструкции; 
	    определение вычислительных устройств, которые нужно задействовать; 
            какие исходные данные и откуда необходимо загрузить для выполнения
2. Read – загрузка исходных данных
3. Execute – выполнение инструкции (преобразование исходных данных в результаты)
4. Write-back – запись результат в отведённое место
$
Понятия «код» и «данные»
Понятия «код» и «данные» условны. 
Код – то, что выполняет процессор (адрес чего записан в EIP), данные – то, с чем работают инструкции (их адреса задаются внутри инструкций). 
ДЛЯ ПРОЦЕССОРА ПРОГРАММА ЕСТЬ МАССИВ БАЙТОВ. 
Ассемблер (компилятор) же формирует масcив байтов, записывает его в исполняемый файл, а новые байты добавляются инструкциями и директивами.