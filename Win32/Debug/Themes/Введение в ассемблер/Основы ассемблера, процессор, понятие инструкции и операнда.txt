Основы ассемблера
Ассемблер - программа, преобразующая исходный текст программы на языке ассеблера в программу на машинном языке.
Язык ассемблера - язык низкого уровня с командами, обычно соответствующими командами машины.
$
Основы ассемблера
Существует 5 режимов работы процессора Intel IA-32:
- Real-Address Mode
- Protected Mode
- System Managment Mode
- Vitrual-8086 Mode
- IA-32e Mode

Из них Real-Address Mode и Protected Mode являются основными.
$
Процессор
Любое запоминающее устройство хранит информацию в виде битов, которые могут группироваться в байты. Любой бит может находиться  двух состояниях - 0 или 1.
Не бывает "пустых" или "чистых" битов и байтов! Если неизвестно, какое там значение, - значит значение не определено.
Само по себе значение бита/байта или их набора бесмысслено. Оно приобретает смысл, когда с ним начинают работать.
$
Процессор
Процессор выполняет бесконечный цикл:
- прочитать очередную команду (Fetch)
- декодировать команду (Decode)
- загрузить исходные данные (Read)
- выполнить команду (Execute)
- записать результаты (Write-back)
$
Инструкции
Команды процессора принято называть инструкциями. При подаче питания процессор начинает выполнять инструкции. Инструкции хранятся в ОЗУ. Первую инструкцию процессор считывает по адресу (при включении (E)IP самой первой инструкции) FFFF:FFF0. Каждую следующую - там, где закончилась предыдущая (после считывания инструкции (E)IP увеличивает на её размер в байтах). Некоторые инструкции позволяют изменить порядок выполнения (некоторые инструкции могут изменять значение регистра (E)IP).
$
Инструкции
Инструкции предназначены для выполнения примитивных операций.
Могут иметь 0, 1, 2 и так далее операндов.
Имеют мнемонические обозначения (mov, int, ret,...).
При компиляции преобразуются в последовательность из 1-17 байт (на практике инструкции длинее 15 байт могут обрабатываться некорректно).
$
Операнды
В ассемблере существуют операнды трёх видов:
- регистр (register, reg)
- константа (immediate, imm)
- операнд в памяти (memory, mem)
$
Операнды-константы
Способы записи в FASM:
- десятичная константа: 8, 23, -2
- 16-ричная константа: $C57P (Pascal hex num), 0FFEC (C hex num), 21h (h = hex), 0BCh (0 - незначащий ноль, дающий понять 	компилятору, что это константа)
- 2-ичные и 8-ичные константы: 1001b (b = binary), 7510o (o = optal)
- и др.
$
Операнды в памяти
Записываются в квадратных скобках, в которых находится выражение, задающее адрес операнда:
- Адрес - число, задающее место в памяти.
Адрес может задаваться:
- числом или константым выражением: [FFh], [Mas]
- выражением с регистром: [bp-4], [di+bx]  
$
Операнды-регистры 
В тексте программы задаются своими конкретными именами и используются эти операнды тогда, когда нужно обратиться напрямую к регистрам.