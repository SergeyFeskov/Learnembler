Сегмент и смещение
Сегментом называется участок памяти размером 64 КБ (16 бит в одной строке, следующий сегмент начинается со следующей строки и перекрывает часть предыдущего сегмента).
Смещение есть порядковый номер байта относительно начала сегмента (начиная с 0).
Таким образом, полный адрес состоит из номера сегмента (16 бит) и смещения (ещё 16 бит).
$
Сегмент и смещение
В командах вроде MOV AX, [DX+SI+$150] задаётся смещение.
$
Сегмент и смещение
Номер сегмента содержится в сегментном регистре. Какой сегментный регистр используется, зависит от того, какое действие выполняет ЦП.
Например CS:IP задаёт адрес следующей команды, где CS – номер сегмента, а IP – смещение внутри сегмента.
Операнды в памяти же по умолчанию задают смещение в сегменте DS, но если смещение BP, то сегмент SS.
$
Сегмент и смещение
Сегментный регистр можно использовать явно: [ES:BX + $875] 
где ES – сегментный регистр.
$
Сегмент и смещение
Один и тот же байт может иметь несколько различных адресов:
$0000:$046C
$0001:$045C
…
$0040:$006C
…
$0046:$000C
…
$
Сегмент и смещение
При запуске программы операционная система настраивает сегментные регистры на свободные области памяти, выбранные для запускаемой программы. 
Например, COM-программа при запуске будет загружена в произвольный сегмент, но по смещению $0100. 
Т.е. по адресу $XXXX:$0100.
$
Эффективный адрес и инструкция LEA
Эффективный (от англ. «effect» - влияние (НЕ ЭФФЕКТ)) адрес – смещение операнда в памяти. 
Т.е. при обращении к операнду в памяти вычисляется значение выражения в квадратных скобках – это и есть эффективный адрес:
MOV AX, [BX + SI + 5]
$
Эффективный адрес и инструкция LEA
В связи с необходимостью вычисления и сохранения эффективного адреса в конкретных регистрах была создана команда LEA (Load Effective Address).
$
Эффективный адрес и инструкция LEA
LEA вычисляет эффективный адрес, к-й указывается в [], и помещает его в операнд-источник. 
При использовании этой команды первым операндом всегда будет регистр, а вторым всегда будет операнд в памяти:
LEA DX, [BX + SI + 42]
$
Эффективный адрес и инструкция LEA
Однако данная команда не выполняет обращения к памяти. Из этого следует, что её можно использовать для вычисления выражений:
MOV EBX, 13
MOV ESI, 48
LEA EAX, [BX*4 + ESI + 63]
$
Эффективный адрес и инструкция LEA
Помимо всего прочего, LEA не меняет флаги, что делает выбор LEA в вычислении выражений в некоторых случаях предпочтительнее, так как например INC и ADD меняют значение регистра флагов. 
То есть, выражение LEA EAX, [EAX + 1] не изменит флаг, а INC EAX как указано в документации: 
The CF flag is not affected. The OF, SF, ZF, AF, and PF flags are set according to the result.